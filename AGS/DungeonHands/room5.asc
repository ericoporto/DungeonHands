// room script file

function room_FirstLoad()
{
  gBlackScreen.TweenTransparency(4.0, 100, eEaseLinearTween, eNoBlockTween);
}



function room_AfterFadeIn()
{
  gItemExchange1.Visible = true;
  gItemExchange2.Visible = true;
  gItemExchange3.Visible = true;
  
  //RoomHelpText = "DEMO 4: Item Exchange[[Drag inventory items from one inventory window into another.";
  //DisplayRoomHelp();
  
  DragDrop.Enabled = true;
  DragDropCommon.ModeEnabled[eDragDropInvItem] = true;
  DragDropCommon.DragMove = eDDCmnMoveGhostGUI;
  DragDropCommon.GhostGUI = gInvItemGhost;
  DragDropCommon.GhostTransparency = 50;
  DragDropCommon.GhostAlpha = false;
  DragDrop.DefaultHookKey = 0;
  DragDrop.DefaultHookMouseButton = eMouseLeft;
  DragDrop.DragMinDistance = 0;
  DragDrop.DragMinTime = 0;
  DragDrop.AutoTrackHookKey = true;
  DragDrop.DefaultUnhookAction = eDDUnhookRevert;
}

function room_Leave()
{
  gItemExchange1.Visible = false;
  gItemExchange2.Visible = false;
  gItemExchange3.Visible = false;
  Cards_delete_all_dynSprites();
}

bool IsOverInvWindow(int o_x, int o_y, int o_w, int o_h, InvWindow *wnd)
{
  int r_x = wnd.OwningGUI.X + wnd.X;
  int r_y = wnd.OwningGUI.Y + wnd.Y;
  int r_x2 = wnd.OwningGUI.X + wnd.X + wnd.Width;
  int r_y2 = wnd.OwningGUI.Y + wnd.Y + wnd.Height;
  return IsObjectOverRect(o_x, o_y, o_w, o_h, r_x, r_y, r_x2, r_y2) ||
      IsPointOverRect(mouse.x, mouse.y, r_x, r_y, r_x2, r_y2);
}

InvWindow* GetInvWindowUnderObject(int o_x, int o_y, int o_w, int o_h)
{
  if (IsOverInvWindow(o_x, o_y, o_w, o_h, InventoryWindow1))
    return InventoryWindow1;
  else if (IsOverInvWindow(o_x, o_y, o_w, o_h, InventoryWindow2))
    return InventoryWindow2;
  else if (IsOverInvWindow(o_x, o_y, o_w, o_h, InventoryWindow3))
    return InventoryWindow3;
  return null;
}

InvWindow* ItemOrigin;
function room_RepExec()
{
  if (DragDrop.CurrentMode != eDragDropInvItem)
    return; // not interested
    
  int o_w = DragDropCommon.ObjectWidth;
  int o_h = DragDropCommon.ObjectHeight;
  int o_x = DragDrop.ObjectX;
  int o_y = DragDrop.ObjectY;
  
  if (DragDrop.EvtObjectHooked)
  {
    ItemOrigin = GetInvWindowUnderObject(o_x, o_y, o_w, o_h);
  }
  else if (DragDrop.EvtWantDrop)
  {
    InvWindow* drop_to = GetInvWindowUnderObject(o_x, o_y, o_w, o_h);
    if (drop_to != null && ItemOrigin != null && drop_to != ItemOrigin)
    {
      
      if(ItemOrigin.CharacterToUse == Play_Get_Char_Monster() && drop_to.CharacterToUse == Play_Get_Char_Hero()){
        return;
      } else if(drop_to.CharacterToUse == Play_Get_Char_Monster() && ItemOrigin.CharacterToUse == Play_Get_Char_Hero()){
        return;
      } 
      
      if(Play_isTurnHero() && Cards_isItemMonster(DragDropCommon._InvItem)){
        return;
      } else if(Play_isTurnMonster() && !Cards_isItemMonster(DragDropCommon._InvItem)){
        return;
      } else if(ItemOrigin.CharacterToUse == Play_Get_Char_Table()){
        return;  
      }
      
      
      ItemOrigin.CharacterToUse.LoseInventory(DragDropCommon._InvItem);
      drop_to.CharacterToUse.AddInventory(DragDropCommon._InvItem);
      CardSound_place();
      
      if(ItemOrigin.CharacterToUse == Play_Get_Char_Monster()){
        Play_Monster_Played_Card(DragDropCommon._InvItem);  
      } else if(ItemOrigin.CharacterToUse == Play_Get_Char_Hero()){
        Play_Hero_Played_Card(DragDropCommon._InvItem);  
      } 
    }
  }
}

function hHotspot1_AnyClick()
{
  Play_begin();
}

function room_Load()
{
  aTheme_1.Play(eAudioPriorityHigh);
  aTheme_1.Play(eAudioPriorityHigh);
}
