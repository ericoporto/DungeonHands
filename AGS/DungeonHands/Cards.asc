// new module script

#define CARDS_MAX 28
#define DECK_SIZE 28
#define TOTAL_CARDS 54
#define DISABLED_CARD_GRAPHIC 72


String allcards[TOTAL_CARDS];

struct CardsUCSprites{
  DynamicSprite * HC_DisableCardSpr;
  DynamicSprite * MC_DisableCardSpr;
};

CardsUCSprites cUcSpr[CARDS_MAX];


int HC_Disabled_Graphic[CARDS_MAX];
int HC_i[CARDS_MAX];
int HC_Graphic[CARDS_MAX];
int HC_Color[CARDS_MAX];
int HC_Rank[CARDS_MAX];
String HC_name[CARDS_MAX];
String HC_txt[CARDS_MAX];
int HC_deck[DECK_SIZE];
int HC_deck_p;


int MC_Disabled_Graphic[CARDS_MAX];
int MC_i[CARDS_MAX];
int MC_Graphic[CARDS_MAX];
int MC_Color[CARDS_MAX];
int MC_Rank[CARDS_MAX];
String MC_name[CARDS_MAX];
String MC_txt[CARDS_MAX];
int MC_deck[DECK_SIZE];
int MC_deck_p;

void MC_CreateDisableCard(int i){
  cUcSpr[i].MC_DisableCardSpr = DynamicSprite.CreateFromExistingSprite(MC_Graphic[i], true);
  cUcSpr[i].MC_DisableCardSpr.Tint(255, 255, 255, 0, 100);
  DrawingSurface * tempDrSf;
  tempDrSf= cUcSpr[i].MC_DisableCardSpr.GetDrawingSurface();
  tempDrSf.DrawImage(0, 0, DISABLED_CARD_GRAPHIC, 60);
  tempDrSf.Release();
  MC_Disabled_Graphic[i] = cUcSpr[i].MC_DisableCardSpr.Graphic;
}

void HC_CreateDisableCard(int i){
  cUcSpr[i].HC_DisableCardSpr = DynamicSprite.CreateFromExistingSprite(HC_Graphic[i], true);
  cUcSpr[i].HC_DisableCardSpr.Tint(255, 255, 255, 0, 100);
  DrawingSurface * tempDrSf;
  tempDrSf= cUcSpr[i].HC_DisableCardSpr.GetDrawingSurface();
  tempDrSf.DrawImage(0, 0, DISABLED_CARD_GRAPHIC, 60);
  tempDrSf.Release();
  HC_Disabled_Graphic[i] = cUcSpr[i].HC_DisableCardSpr.Graphic;
}

void CreateAllDisabledGraphics(){
  int i;
  i=0;
  while(i<CARDS_MAX){
    MC_CreateDisableCard(i);
    HC_CreateDisableCard(i);
    i++;
  }

}

void shuffleHC_deck(){
  int n=DECK_SIZE;
  if (n > 1) {
    int i = 0;
    while(i< n - 1){
      int j = i + Random((n - i) -1);
      int t = HC_deck[j];
      HC_deck[j] = HC_deck[i];
      HC_deck[i] = t;
      
      i++;
    }
  }
}


void shuffleMC_deck(){
  int n=DECK_SIZE;
  if (n > 1) {
    int i = 0;
    while(i< n - 1){
      int j = i + Random((n - i) -1);
      int t = MC_deck[j];
      MC_deck[j] = MC_deck[i];
      MC_deck[i] = t;
      
      i++;
    }
  }
}



int Card_HC_getCardGraphic(int i){
  return HC_Graphic[i];
}

int Card_MC_getCardGraphic(int i){
  return MC_Graphic[i];  
}


String Card_HC_getCardName(int i){
  return HC_name[i];
}

String Card_MC_getCardName(int i){
  return MC_name[i];  
}

String Card_HC_getCardText(int i){
  return HC_txt[i];
}

String Card_MC_getCardText(int i){
  return MC_txt[i];  
}
  
  
int Card_HC_getCardRank(int i){
  return HC_Rank[i];
}

int Card_MC_getCardRank(int i){
  return MC_Rank[i];
}

int Card_HC_getCardColor(int i){
  return HC_Color[i];
}

int Card_MC_getCardColor(int i){
  return MC_Color[i];
}

bool Card_HC_isCardSpecial(int i){
  return HC_Color[i]==CCOLOR_GRAY;
}

bool Card_MC_isCardSpecial(int i){
  return MC_Color[i]==CCOLOR_GRAY;
  
}

int Cards_HC_ItemToCard(InventoryItem * invItm){
  int i;
  i=0;
  while(i<CARDS_MAX){
    if(HC_i[i]==invItm.ID){
      return i;  
    }
    i++;
  }
  return -1;
}

int Cards_MC_ItemToCard(InventoryItem * invItm){
  int i;
  i=0;
  while(i<CARDS_MAX){
    if(MC_i[i]==invItm.ID){
      return i;  
    }
    i++;
  }
  return -1;
  
}

bool Cards_isItemMonster(InventoryItem * invItm){
  int temp_class= (invItm.ID-1)%9;
  if((temp_class>3 && temp_class<8) || invItm.ID > 54){
    return true;
  } else {
    return false;  
  }
}

void Cards_SetCardItemDisable(InventoryItem * icard){
  icard.SetProperty("boolDisableDrag", 1);
  if(Cards_isItemMonster(icard)){
    icard.Graphic = MC_Disabled_Graphic[Cards_MC_ItemToCard(icard)];
  } else {
    icard.Graphic = HC_Disabled_Graphic[Cards_HC_ItemToCard(icard)];
  }
}

void Cards_SetCardItemEnable(InventoryItem * icard){
  icard.SetProperty("boolDisableDrag", 0);
  if(Cards_isItemMonster(icard)){
    icard.Graphic = MC_Graphic[Cards_MC_ItemToCard(icard)];
  } else {
    icard.Graphic = HC_Graphic[Cards_HC_ItemToCard(icard)];
  }
}


void Cards_MC_EnableAllDrag(){
  int i;
  i=0;
  while(i<CARDS_MAX){
    if(MC_i[i]>0 && MC_i[i]<Game.InventoryItemCount+1){
      Cards_SetCardItemEnable(inventory[MC_i[i]]);
    }
    i++;
  }
}

void Cards_HC_EnableAllDrag(){
  int i;
  i=0;
  while(i<CARDS_MAX){
    if(HC_i[i]>0 && HC_i[i]<Game.InventoryItemCount+1){
      Cards_SetCardItemEnable(inventory[HC_i[i]]);
    }
    i++;
  }
}

InventoryItem * Cards_HC_CardToItem(int card){
  return inventory[HC_i[card]];
}


InventoryItem * Cards_MC_CardToItem(int card){
  return inventory[MC_i[card]];
}

void Cards_makeDecks(){
  int i=0;
  while(i<DECK_SIZE){
    HC_deck[i]=i;
    MC_deck[i]=i;
    i++;
  }
  shuffleMC_deck();
  shuffleHC_deck();
  HC_deck_p=DECK_SIZE-1;
  MC_deck_p=DECK_SIZE-1;
}

int Cards_drawCard_MC(){
  MC_deck_p--;
  if(MC_deck_p>-1){
    return MC_deck[MC_deck_p+1];
  } else {
    return -1;
  }
}

int Cards_drawCard_HC(){
  HC_deck_p--;
  if(HC_deck_p>-1){
    return HC_deck[HC_deck_p+1];
  } else {
    return -1;
  }
}

void initializeCards(){
  allcards[0]="Warrior Level 1";
  allcards[1]="Mage Level 1";
  allcards[2]="Rogue Level 1";
  allcards[3]="Cleric Level 1";
  allcards[4]="Cat";
  allcards[5]="Dark Cat";
  allcards[6]="Flying Cat";
  allcards[7]="Cat Zombie";
  allcards[8]="Knowledge is Power";
  allcards[9]="Warrior Level 2";
  allcards[10]="Mage Level 2";
  allcards[11]="Rogue Level 2";
  allcards[12]="Cleric Level 2";
  allcards[13]="Kobold";
  allcards[14]="Frozen Kobold";
  allcards[15]="Kobold Trap";
  allcards[16]="Kobold Ghost";
  allcards[17]="Silence I want to read";
  allcards[18]="Warrior Level 3";
  allcards[19]="Mage Level 3";
  allcards[20]="Rogue Level 3";
  allcards[21]="Cleric Level 3";
  allcards[22]="Goblin";
  allcards[23]="Icy Goblin";
  allcards[24]="Flying Goblin";
  allcards[25]="Kobold Zombie";
  allcards[26]="Everything is better on Fire";
  allcards[27]="Warrior Level 4";
  allcards[28]="Mage Level 4";
  allcards[29]="Rogue Level 4";
  allcards[30]="Cleric Level 4";
  allcards[31]="Goblin Knight";
  allcards[32]="Mimic";
  allcards[33]="Trap Treasure";
  allcards[34]="Goblin Skeleton";
  allcards[35]="Rainbow Union";
  allcards[36]="Warrior Level 5";
  allcards[37]="Mage Level 5";
  allcards[38]="Rogue Level 5";
  allcards[39]="Cleric Level 5";
  allcards[40]="Orc";
  allcards[41]="Magic Orc";
  allcards[42]="Balloon Orc";
  allcards[43]="Undead Orc";
  allcards[44]="BackHero";
  allcards[45]="Warrior Level 6";
  allcards[46]="Mage Level 6";
  allcards[47]="Rogue Level 6";
  allcards[48]="Cleric Level 6";
  allcards[49]="Giant Bear";
  allcards[50]="Giant Bear with Glasses";
  allcards[51]="Big Bat";
  allcards[52]="Vampire Cat Zombie";
  allcards[53]="BackMonster";

  int i=0;
  int h_i=0;
  int m_i=0;
  while(i<TOTAL_CARDS){
    if((i%9)<4){
      HC_name[h_i]=allcards[i];
      HC_Color[h_i] = (i%9);
      HC_Rank[h_i] = (i/9);
      HC_txt[h_i]="";
      HC_i[h_i]=i+1;
      HC_Graphic[h_i]=i+18;
      h_i++;
    } else if((i%9)<8 && (i%9)>3) {
      MC_name[m_i]=allcards[i];
      MC_Color[m_i] = (i%9)-4;
      MC_Rank[m_i] = (i/9);
      MC_txt[m_i]="";
      MC_i[m_i]=i+1;
      MC_Graphic[m_i]=i+18;
      m_i++;
    } else if((i%9)==8 && i<44){
      MC_name[m_i]=allcards[i];
      HC_name[h_i]=allcards[i];
      HC_i[h_i]=i+1;
      HC_Graphic[h_i]=i+18;
      MC_Graphic[m_i]=i+18;
      if(i==8){
        //Knowledge is Power
        MC_txt[m_i]="Draw two cards at the end of the turn.";
        HC_txt[h_i]="Draw two cards at the end of the turn.";
        MC_i[m_i]=55;
        
      } else if(i==17){
        //Silence I want to read
        MC_txt[m_i]="Your oponent can't play cards this turn. They draw an adittional card.";
        HC_txt[h_i]="Your oponent can't play cards this turn. They draw an adittional card.";
        MC_i[m_i]=56;
        
      } else if(i==26){
        //Everything is better on Fire
        MC_txt[m_i]="Your cards have level +1. You have to play an aditional card.";
        HC_txt[h_i]="Your cards have level +1. You have to play an aditional card.";
        MC_i[m_i]=57;
        
      } else if(i==35){
        //Rainbow Union
        MC_txt[m_i]="Draw a card. Rainbow Union can only be played after a play has happened. You can play multiple cards this turn until they sum the level of the card in dungeon.";
        HC_txt[h_i]="Draw a card. Rainbow Union can only be played after a play has happened. You can play multiple cards this turn until they sum the level of the card in dungeon.";
        MC_i[m_i]=58;
        
      }
      HC_Color[h_i] = CCOLOR_GRAY;
      HC_Rank[h_i] = RANK_SP;
      MC_Color[m_i] = CCOLOR_GRAY;
      MC_Rank[m_i] = RANK_SP;
      m_i++;
      h_i++;
    } 
    
    i++;
  }
  CreateAllDisabledGraphics();
  Cards_makeDecks();
}


void game_start(){
  initializeCards();
}