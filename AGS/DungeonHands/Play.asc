// new module script
#define FX_TIMING 0.2
Character * cHero;
Character * cMonster;
Character * cTable;
GUI * GUI_HeroHand;
GUI * GUI_MonsterHand;
GUIControl * InvWindow_Hero;
GUIControl * InvWindow_Monster;
int turn_counter;
bool turn_monster;
bool turn_hero;
int phase;
bool playerd_monster_this_turn;
bool playerd_hero_this_turn;
bool advantage_hero;
bool advantage_monster;
bool enforce_rules;
bool first_turn_in_round;

void Play_WinMonster(){
  Display("Monster Lord wins!");
  RestartGame();
}

void Play_WinHero(){
  Display("Hero wins!");
  RestartGame();  
}


void CardsInHand_toBack_HC(){
  int i=1;
  while(i<Game.InventoryItemCount+1){
    if(cHero.InventoryQuantity[i]>0){
      inventory[i].Graphic = CARD_BACK_HERO_GRAPHIC;  
    }
    i++;
  }
}

void CardsInHand_toBack_MC(){
  int i=1;
  while(i<Game.InventoryItemCount+1){
    if(cMonster.InventoryQuantity[i]>0){
      inventory[i].Graphic = CARD_BACK_MONSTER_GRAPHIC;  
    }
    i++;
  }
}


void CardsInHand_toFace_HC(){
  int i=1;
  int itmc;
  while(i<Game.InventoryItemCount+1){
    if(cHero.InventoryQuantity[i]>0){
      itmc = Cards_HC_ItemToCard(inventory[i]);
      if(itmc>0){
        inventory[i].Graphic = Card_HC_getCardGraphic(itmc);  
      }
    }
    i++;
  }
}

void CardsInHand_toFace_MC(){
  int i=1;
  int itmc;
  while(i<Game.InventoryItemCount+1){
    if(cMonster.InventoryQuantity[i]>0){
      itmc= Cards_MC_ItemToCard(inventory[i]);
      if(itmc>0){
        inventory[i].Graphic = Card_MC_getCardGraphic(itmc);  
      }
    }
    i++;
  }
}

//this code will use a HUGE HACK!
void CheckValidCards_HC(){
  int i;
  
  if(!enforce_rules){
    i=1;
    while(i<Game.InventoryItemCount+1){
      if(cHero.InventoryQuantity[i]>0){
        if(!Cards_isItemMonster(inventory[i])){
          //it's a playable card  
          Cards_SetCardItemEnable(inventory[i]);
        } 
      }
      i++;
    }
    return;  
  }
  
  
  int enemy_rank=0;
  int enemy_color;
  int tmp_color;
  
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cTable.InventoryQuantity[i]>0){
      if(Cards_isItemMonster(inventory[i])){
        tmp_color = Card_MC_getCardColor(Cards_MC_ItemToCard(inventory[i]));
        if(tmp_color != CCOLOR_GRAY){
          enemy_rank+=Card_MC_getCardRank(Cards_MC_ItemToCard(inventory[i]));
          enemy_color = tmp_color;
        }
      } 
    }
    i++;
  }
  
  //Display("1st turn %d",first_turn_in_round);
  
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cHero.InventoryQuantity[i]>0){
      if(!Cards_isItemMonster(inventory[i])){
        if(first_turn_in_round || Card_HC_getCardRank(Cards_HC_ItemToCard(inventory[i])) > enemy_rank || Card_HC_getCardColor(Cards_HC_ItemToCard(inventory[i])) == enemy_color || Card_HC_getCardColor(Cards_HC_ItemToCard(inventory[i])) == CCOLOR_GRAY){
          //it's a playable card  
          Cards_SetCardItemEnable(inventory[i]);
        } else {
          //it's not a playable card
          Cards_SetCardItemDisable(inventory[i]);
        }
      } 
    }
    i++;
  }
}


//this code will use a HUGE HACK!
void CheckValidCards_MC(){
  int i;
  
  if(!enforce_rules){
    i=1;
    while(i<Game.InventoryItemCount+1){
      if(cMonster.InventoryQuantity[i]>0){
        if(Cards_isItemMonster(inventory[i])){
          //it's a playable card  
          Cards_SetCardItemEnable(inventory[i]);
        } 
      }
      i++;
    }
    return;  
  }
  
  
  int enemy_rank=0;
  int enemy_color;
  
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cTable.InventoryQuantity[i]>0){
      if(!Cards_isItemMonster(inventory[i])){
        enemy_rank+=Card_HC_getCardRank(Cards_HC_ItemToCard(inventory[i]));
        enemy_color = Card_HC_getCardColor(Cards_HC_ItemToCard(inventory[i]));
      } 
    }
    i++;
  }
  
  
  //Display("1st turn %d",first_turn_in_round);
  
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cMonster.InventoryQuantity[i]>0){
      if(Cards_isItemMonster(inventory[i])){
        if(first_turn_in_round || Card_MC_getCardRank(Cards_MC_ItemToCard(inventory[i])) > enemy_rank || Card_MC_getCardColor(Cards_MC_ItemToCard(inventory[i])) == enemy_color || Card_MC_getCardColor(Cards_MC_ItemToCard(inventory[i])) == CCOLOR_GRAY){
          //it's a playable card  
          Cards_SetCardItemEnable(inventory[i]);
        } else {
          //it's not a playable card
          Cards_SetCardItemDisable(inventory[i]);
        }
      } 
    }
    i++;
  }
}

void SwitchSeatsMessage_HCtoMC(){
    CardsInHand_toBack_HC();
   // CardsInHand_toBack_MC();
    Display("switch seats... [The person playing Monsters should be sitting before procceeding");  
}

void SwitchSeatsMessage_MCtoHC(){
   // CardsInHand_toBack_HC();
    CardsInHand_toBack_MC();
    Display("switch seats... [The person playing Heroes should be sitting before procceeding");  
}

void setAdvantage_Hero(){
  advantage_hero = true;
  advantage_monster = false;
}

void setAdvantage_Monster(){
  advantage_hero = false;
  advantage_monster = true;
}

void loseAllInventory(Character * c_to_lose){
  int i;
  i=1;
  while(i < Game.InventoryItemCount+1){
    int k;
    k=0;
    while(k<c_to_lose.InventoryQuantity[i]){
      c_to_lose.LoseInventory(inventory[i]);
      k++;  
    }
  
    i++;
  }
}

void Play_zeroItems(){
  loseAllInventory(cInvOwner1);
  loseAllInventory(cInvOwner2);
  loseAllInventory(cInvOwner3);
}

void start_round(){
  first_turn_in_round=true;
  playerd_monster_this_turn=false;
  playerd_hero_this_turn=false;
}

void resolve_table(){
  int monster_rank=0;
  int hero_rank=0;
  int i;
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cTable.InventoryQuantity[i]>0){
      if(Cards_isItemMonster(inventory[i])){
        int card;
        card = Cards_MC_ItemToCard(inventory[i]);
        if(Card_MC_getCardColor(card)!=CCOLOR_GRAY){
          monster_rank+=Card_MC_getCardRank(card);
        }
      } else {
        int card;
        card = Cards_HC_ItemToCard(inventory[i]);
        if(Card_HC_getCardColor(card)!=CCOLOR_GRAY){
          hero_rank+=Card_HC_getCardRank(card);          
        }        
      } 
    }
    i++;
  }
  
  
  loseAllInventory(cInvOwner3);
  
  if(hero_rank>monster_rank){
    setAdvantage_Hero(); 
  } else if(monster_rank>hero_rank){
    setAdvantage_Monster(); 
  } else {
    if(turn_hero ){
      setAdvantage_Hero();  
    } else {
      setAdvantage_Monster(); 
    }
  }
}

Character * Play_Get_Char_Monster(){
  return cMonster;
}

Character * Play_Get_Char_Hero(){
  return cHero;
}

function playerMonster_DrawQuick(){
  cMonster.AddInventory(Cards_MC_CardToItem(Cards_drawCard_MC()));
}


function playerHero_DrawQuick(){
  cHero.AddInventory(Cards_HC_CardToItem(Cards_drawCard_HC()));
}

function playerMonster_Draw(){
  int card = Cards_drawCard_MC();
  if(card<0){
    //no cards, you lose
    Play_WinHero();
    return;
  }
  
  gFloatingDrawCard.Visible=true;
  gFloatingDrawCard.BackgroundGraphic = Card_MC_getCardGraphic(card);
  gFloatingDrawCard.X = gDeckMonster.X;
  gFloatingDrawCard.Y = gDeckMonster.Y;
  int d_x = GUI_MonsterHand.X + InvWindow_Monster.X+ InvWindow_Monster.AsInvWindow.ItemCount*InvWindow_Monster.AsInvWindow.ItemWidth;
  int d_y = GUI_MonsterHand.Y+InvWindow_Monster.Y; 
  gFloatingDrawCard.TweenPosition(FX_TIMING, d_x, d_y, eEaseLinearTween, eBlockTween);
  gFloatingDrawCard.Visible = false;
  cMonster.AddInventory(Cards_MC_CardToItem(card));
  if(turn_monster){
    CheckValidCards_MC();
  }
  InvWinAll_fixDimensions();
}


function playerHero_Draw(){
  int card = Cards_drawCard_HC();
  if(card<0){
    //no cards, you lose
    Play_WinMonster();
    return;
  }
  
  gFloatingDrawCard.Visible=true;
  gFloatingDrawCard.BackgroundGraphic = Card_HC_getCardGraphic(card);
  gFloatingDrawCard.X = gDeckHero.X;
  gFloatingDrawCard.Y = gDeckHero.Y;
  int d_x = GUI_HeroHand.X + InvWindow_Hero.X+ InvWindow_Hero.AsInvWindow.ItemCount*InvWindow_Hero.AsInvWindow.ItemWidth;
  int d_y = GUI_HeroHand.Y+InvWindow_Hero.Y;
  gFloatingDrawCard.TweenPosition(FX_TIMING, d_x, d_y, eEaseLinearTween, eBlockTween);
  gFloatingDrawCard.Visible = false;
  cHero.AddInventory(Cards_HC_CardToItem(card));
  if(turn_hero){
    CheckValidCards_HC();
  }
  InvWinAll_fixDimensions();
  
}


void setMonsterTurn(){
  if(turn_hero){ 
    SwitchSeatsMessage_HCtoMC();
  }
  
  turn_hero=false;
  GUI_HeroHand.Clickable = false;
  GUI_HeroHand.Transparency = 20;
  gDeckHero.Transparency = 20;
  CardsInHand_toBack_HC();
  
  turn_monster=true;
  GUI_MonsterHand.Clickable = true;
  GUI_MonsterHand.Transparency = 0;
  gDeckMonster.Transparency = 0;
  CardsInHand_toFace_MC();
  CheckValidCards_MC();
  
}

void setHeroTurn(){
  if(turn_monster){ 
    SwitchSeatsMessage_MCtoHC();
  }
  
  turn_monster=false;
  GUI_MonsterHand.Clickable = false;
  GUI_MonsterHand.Transparency = 20;
  gDeckMonster.Transparency = 20;
  CardsInHand_toBack_MC();
  
  turn_hero=true;
  GUI_HeroHand.Clickable = true;
  GUI_HeroHand.Transparency = 0;
  gDeckHero.Transparency = 0;
  CardsInHand_toFace_HC();
  CheckValidCards_HC();
}

void next_turn(){
  turn_counter++;
  
  if(turn_counter%2==0){
    start_round();
    //it's the first turn in round
    
    if(advantage_hero){
      setHeroTurn(); 
    } else {
      setMonsterTurn();
    }
  } else {  
    //it's the second turn in round
    first_turn_in_round=false;
    
    if(turn_hero){
      setMonsterTurn();
      
    } else {
      setHeroTurn();
    }
    
  }
  
 
}

void Play_next_turn(){
  next_turn();
}

void Play_End_Turn(){
  if(playerd_hero_this_turn && playerd_monster_this_turn){
    resolve_table();
  }
  Play_next_turn();
}


bool isHeroCardsHandZero(){
  int i;
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cHero.InventoryQuantity[i]>0){
      return false;  
    }  
    i++;
  }
  return true;    
}

bool isMonsterCardsHandZero(){
  int i;
  i=1;
  while(i<Game.InventoryItemCount+1){
    if(cMonster.InventoryQuantity[i]>0){
      return false;  
    }  
    i++;
  }
  return true;
}


void Play_Hero_Played_Card(InventoryItem * invItm){
  int card = Cards_HC_ItemToCard(invItm);
  playerd_hero_this_turn=true;
  InvWinAll_fixDimensions();
  //check if we still have cards
  if(isHeroCardsHandZero()){
    Play_WinHero();  
  }
  
  if(!Card_HC_isCardSpecial(card)){
    Play_End_Turn();
  }
  
  
}

void Play_Monster_Played_Card(InventoryItem * invItm){
  int card = Cards_MC_ItemToCard(invItm);
  playerd_monster_this_turn=true;
  InvWinAll_fixDimensions();
  //check if we still have cards
  if(isMonsterCardsHandZero()){
    Play_WinMonster();  
  }
  
  if(!Card_MC_isCardSpecial(card)){
    Play_End_Turn();
  }
}

function Play_deckDraw_MC(){
  if(turn_monster){
    playerMonster_Draw();
  }
}

function Play_deckDraw_HC(){
  if(turn_hero){
    playerHero_Draw();
  }
  
}

void drawHands(){
  int n_cards;
  n_cards=7;
  while(n_cards>0){
    playerMonster_DrawQuick();
    n_cards--;
  }
  
  n_cards=7;
  while(n_cards>0){
    playerHero_DrawQuick();
    n_cards--;
  }
}



void Play_disableRules(){
  enforce_rules=false;
  if(turn_monster){
    CheckValidCards_MC();  
  } else {
    CheckValidCards_HC();  
  }
}

void Play_enableRules(){
  enforce_rules=true;  
  if(turn_monster){
    CheckValidCards_MC();  
  } else {
    CheckValidCards_HC();  
  }
}

function Play_begin(){
  turn_counter=0;
  gDeckHero.Visible = true;
  gDeckMonster.Visible = true;
  Play_zeroItems();
  Cards_makeDecks();
  drawHands();
  setAdvantage_Monster();
  start_round();
  setMonsterTurn();
  InvWinAll_fixDimensions();
}

function game_start(){
  enforce_rules = true;
  cHero = cInvOwner1 ;
  cMonster = cInvOwner2 ;
  cTable = cInvOwner3;
  GUI_HeroHand=gItemExchange1;
  GUI_MonsterHand=gItemExchange2;
  InvWindow_Hero = InventoryWindow1;
  InvWindow_Monster = InventoryWindow2;
  Play_begin();
}
